const { loadCaba√±as } = require('../services/alojamientosService');
const { safeSend } = require('../utils/messageUtils');

// Funci√≥n para generar detalles textuales de una caba√±a
const generateCabinDetails = (caba√±a) => {
  let detalles = `üèñÔ∏è *${caba√±a.nombre}* (${caba√±a.tipo})\n`;
  detalles += `üë• Capacidad: ${caba√±a.capacidad} personas\n`;
  detalles += `üõèÔ∏è Habitaciones: ${caba√±a.habitaciones} | üöø Ba√±os: ${caba√±a.ba√±os}\n`;
  detalles += `üí∞ Precio por noche: ${caba√±a.precio_noche.toLocaleString()} ${caba√±a.moneda}\n`;
  detalles += `üìç Ubicaci√≥n: ${caba√±a.ubicacion.ciudad}, ${caba√±a.ubicacion.departamento}\n\n`;
  
  detalles += `üõãÔ∏è Comodidades:\n`;
  detalles += caba√±a.comodidades.map(item => `- ${item}`).join('\n');
  
  if (caba√±a.descripcion) {
    detalles += `\n\nüìñ Descripci√≥n:\n${caba√±a.descripcion}`;
  }
  
  if (caba√±a.reservas?.length > 0) {
    detalles += `\n\nüìÖ Fechas reservadas:\n`;
    detalles += caba√±a.reservas.map(reserva => 
      `- ${reserva.fecha_inicio} a ${reserva.fecha_fin} (${reserva.estado})`
    ).join('\n');
  }
  
  return detalles;
};

// Funci√≥n para enviar fotos de la caba√±a
const sendCabinPhotos = async (bot, remitente, fotos) => {
  if (!fotos || fotos.length === 0) return;
  
  try {
    // Enviar la primera foto con pie de foto
    await bot.sendMessage(remitente, {
      image: { url: fotos[0] },
      caption: 'Fotos de la caba√±a:'
    });
    
    // Enviar las fotos restantes
    for (const foto of fotos.slice(1)) {
      await bot.sendMessage(remitente, { image: { url: foto } });
    }
  } catch (error) {
    console.error('Error enviando fotos:', error);
    await safeSend(bot, remitente, '‚ö†Ô∏è No se pudieron cargar las fotos de la caba√±a');
  }
};

// Handler principal para el flujo de alojamientos
const flowAlojamientosHandler = async (ctx, { provider, flowDynamic, state, endFlow }) => {
  const caba√±as = loadCaba√±as();
  
  if (caba√±as.length === 0) {
    await flowDynamic('‚ö†Ô∏è No hay caba√±as disponibles en este momento.');
    return endFlow();
  }
  
  // Generar men√∫ din√°mico
  const menu = [
    'Tenemos estas caba√±as disponibles:',
    ...caba√±as.map((caba√±a, index) => `${index + 1}. ${caba√±a.nombre}`),
    'Selecciona el n√∫mero de la caba√±a para ver m√°s detalles.'
  ].join('\n');
  
  await flowDynamic(menu);

  // Validar selecci√≥n del usuario
  const seleccion = parseInt(ctx.body.trim());
  if (isNaN(seleccion) || seleccion < 1 || seleccion > caba√±as.length) {
    await flowDynamic('‚ö†Ô∏è Selecci√≥n inv√°lida. Por favor, ingresa un n√∫mero v√°lido del men√∫.');
    return endFlow();
  }
  
  const caba√±aSeleccionada = caba√±as[seleccion - 1];
  const detalles = generateCabinDetails(caba√±aSeleccionada);
  
  await flowDynamic(detalles);
  
  // Si hay fotos, enviar mensaje adicional
  if (caba√±aSeleccionada.fotos?.length > 0) {
    await flowDynamic('üñºÔ∏è Enviando fotos de la caba√±a...');
  }
};

// Enviar detalles de alojamiento con fotos
const sendAlojamientoDetails = async (bot, remitente, seleccion) => {
  const caba√±as = loadCaba√±as();
  
  if (seleccion < 1 || seleccion > caba√±as.length) {
    await safeSend(bot, remitente, '‚ö†Ô∏è Selecci√≥n inv√°lida. Por favor, ingresa un n√∫mero v√°lido del men√∫.');
    return;
  }
  
  const caba√±a = caba√±as[seleccion - 1];
  const detalles = generateCabinDetails(caba√±a);
  
  // Enviar detalles textuales
  await safeSend(bot, remitente, detalles);
  
  // Enviar fotos si existen
  if (caba√±a.fotos?.length > 0) {
    await sendCabinPhotos(bot, remitente, caba√±a.fotos);
  }
};

module.exports = { 
  flowAlojamientosHandler, 
  sendAlojamientoDetails 
};