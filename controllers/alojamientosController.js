const { loadCaba√±as, safeSave } = require('../services/alojamientosService');

const flowAlojamientosHandler = async (ctx, { provider, flowDynamic, state, endFlow }) => {
  const caba√±as = loadCaba√±as();
  if (caba√±as.length === 0) {
    await flowDynamic('‚ö†Ô∏è No hay caba√±as disponibles en este momento.');
    return;
  }
  let menu = 'Tenemos estas caba√±as disponibles:\\n';
  caba√±as.forEach((caba√±a, index) => {
    menu += `${index + 1}. ${caba√±a.nombre}\\n`;
  });
  menu += 'Por favor, selecciona el n√∫mero de la caba√±a para ver m√°s detalles.';
  await flowDynamic(menu);

  // Capture user selection
  const seleccion = parseInt(ctx.body.trim());
  if (isNaN(seleccion) || seleccion < 1 || seleccion > caba√±as.length) {
    await flowDynamic('‚ö†Ô∏è Selecci√≥n inv√°lida. Por favor, ingresa un n√∫mero v√°lido del men√∫.');
    return endFlow();
  }
  const caba√±a = caba√±as[seleccion - 1];
  let detalles = `üèñÔ∏è *${caba√±a.nombre}* (${caba√±a.tipo})\\n`;
  detalles += `üë• Capacidad: ${caba√±a.capacidad} personas\\n`;
  detalles += `üõèÔ∏è Habitaciones: ${caba√±a.habitaciones} | üöø Ba√±os: ${caba√±a.ba√±os}\\n`;
  detalles += `üí∞ Precio por noche: ${caba√±a.precio_noche.toLocaleString()} ${caba√±a.moneda}\\n`;
  detalles += `üìç Ubicaci√≥n: ${caba√±a.ubicacion.ciudad}, ${caba√±a.ubicacion.departamento}\\n\\n`;
  detalles += `üõãÔ∏è Comodidades:\\n`;
  caba√±a.comodidades.forEach(item => {
    detalles += `- ${item}\\n`;
  });
  if (caba√±a.reservas && caba√±a.reservas.length > 0) {
    detalles += `\\nüìÖ Fechas reservadas:\\n`;
    caba√±a.reservas.forEach(reserva => {
      detalles += `- ${reserva.fecha_inicio} a ${reserva.fecha_fin} (${reserva.estado})\\n`;
    });
  }
  if (caba√±a.fotos && caba√±a.fotos.length > 0) {
    detalles += `\\nüñºÔ∏è Fotos:\\n`;
    caba√±a.fotos.forEach(url => {
      detalles += `${url}\\n`;
    });
  }
  await flowDynamic(detalles);
};

async function sendAlojamientoDetails(bot, remitente, seleccion) {
  const caba√±as = loadCaba√±as();
  if (seleccion < 1 || seleccion > caba√±as.length) {
    await bot.sendMessage(remitente, { text: '‚ö†Ô∏è Selecci√≥n inv√°lida. Por favor, ingresa un n√∫mero v√°lido del men√∫.' });
    return;
  }
  const caba√±a = caba√±as[seleccion - 1];
  let detalles = `üèñÔ∏è *${caba√±a.nombre}* (${caba√±a.tipo})\n`;
  detalles += `üë• Capacidad: ${caba√±a.capacidad} personas\n`;
  detalles += `üõèÔ∏è Habitaciones: ${caba√±a.habitaciones} | üöø Ba√±os: ${caba√±a.ba√±os}\n`;
  detalles += `üí∞ Precio por noche: ${caba√±a.precio_noche.toLocaleString()} ${caba√±a.moneda}\n`;
  detalles += `üìç Ubicaci√≥n: ${caba√±a.ubicacion.ciudad}, ${caba√±a.ubicacion.departamento}\n\n`;
  detalles += `üõãÔ∏è Comodidades:\n`;
  caba√±a.comodidades.forEach(item => {
    detalles += `- ${item}\n`;
  });
  if (caba√±a.reservas && caba√±a.reservas.length > 0) {
    detalles += `\nüìÖ Fechas reservadas:\n`;
    caba√±a.reservas.forEach(reserva => {
      detalles += `- ${reserva.fecha_inicio} a ${reserva.fecha_fin} (${reserva.estado})\n`;
    });
  }
  if (caba√±a.fotos && caba√±a.fotos.length > 0) {
    await bot.sendMessage(remitente, {
      image: { url: caba√±a.fotos[0] },
      caption: detalles
    });
    for (let i = 1; i < caba√±a.fotos.length; i++) {
      await bot.sendMessage(remitente, {
        image: { url: caba√±a.fotos[i] }
      });
    }
  } else {
    await bot.sendMessage(remitente, { text: detalles });
  }
}

module.exports = { flowAlojamientosHandler, sendAlojamientoDetails };
