const caba√±as = require('../data/caba√±as.json');
const actividadesData = require('../data/actividades.json');
const WeatherModule = require('../services/weatherService');
const { sendShareExperienceInstructions } = require('../routes/shareExperience');
// const { manejarPostReserva } = require('../routes/postReservaHandler'); // TEMPORALMENTE COMENTADO
const { extraerTelefono } = require('../utils/telefonoUtils');

const weatherModule = new WeatherModule('5a9417f67be807a6e981ec69173924ac');

// Estados constantes
const STATES = {
  LODGING: 'alojamientos',
  DATES: 'reservar_fechas',
  ACTIVITIES: 'actividades',
  SHARE_EXPERIENCE: 'compartir_experiencia',
  POST_RESERVA: 'post_reserva'
};

// Helper para enviar mensajes con manejo de errores
async function safeSend(bot, recipient, text) {
  try {
    await bot.sendMessage(recipient, { text });
    return true;
  } catch (error) {
    console.error(`Error al enviar mensaje a ${recipient}:`, error);
    return false;
  }
}

// Helper para generar men√∫s din√°micos
function generateDynamicMenu(items, itemType) {
  if (items.length === 0) {
    return `‚ö†Ô∏è No hay ${itemType} disponibles en este momento.`;
  }

  const title = `Tenemos estas ${itemType} disponibles:\n`;
  const list = items.map((item, index) => `${index + 1}. ${item.nombre}`).join('\n');
  const instructions = '\nPor favor, selecciona el n√∫mero para ver m√°s detalles.';
  
  return title + list + instructions;
}

// Contenido de FAQs
const FAQ_CONTENT = `üèùÔ∏è *Preguntas Frecuentes ‚Äì Villas frente al mar*\n\n` +
  `1. üè° ¬øQu√© tipos de alojamientos ofrecen?\n` +
  `Ofrecemos caba√±as y apartamentos equipados, con vista al mar y acceso directo a la playa.\n\n` +
  `2. üïí ¬øA qu√© hora es el check-in y check-out?\n` +
  `Check-in: 2:00 PM | Check-out: 11:00 AM\n\n` +
  `3. üíµ ¬øCu√°les son las tarifas?\n` +
  `Var√≠an seg√∫n temporada y tipo de alojamiento. Cont√°ctanos para cotizaci√≥n.\n\n` +
  `4. üë®‚Äçüë©‚Äçüëß ¬øSe permiten ni√±os y mascotas?\n` +
  `Ni√±os: ¬°S√≠! | Mascotas: Consulta condiciones.\n\n` +
  `5. üç≥ ¬øLas caba√±as tienen cocina?\n` +
  `S√≠, todas incluyen cocina equipada.\n\n` +
  `6. üèñÔ∏è ¬øQu√© servicios est√°n incluidos?\n` +
  `Aire acondicionado, Wi-Fi, Parqueo, Acceso a playa\n\n` +
  `7. üìç ¬øD√≥nde est√°n ubicados?\n` +
  `Tela, Atl√°ntida, frente al mar.\n\n` +
  `8. üìÖ ¬øC√≥mo reservar?\n` +
  `Escr√≠benos con tus fechas y n√∫mero de personas.\n\n` +
  `9. üí≥ ¬øFormas de pago?\n` +
  `Efectivo, Transferencias, Tarjetas\n\n` +
  `10. üîí ¬øDep√≥sito para reservar?\n` +
  `S√≠, 50% de adelanto.\n\n` +
  `Escribe "menu" para volver al men√∫ principal.`;

async function handleMainMenuOptions(bot, remitente, mensaje, establecerEstado) {
  switch (mensaje) {
    case '1': // Alojamientos
      await safeSend(bot, remitente, generateDynamicMenu(caba√±as, 'caba√±as'));
      await establecerEstado(remitente, STATES.LODGING);
      break;

    case '2': // Reservar
      await safeSend(bot, remitente, 
        '‚ú® *¬°Reserva tu experiencia perfecta!* ‚ú®\nüóìÔ∏è Solo comp√°rtenos tus fechas favoritas\nüí´ Ejemplo: 20/08/2025 - 25/08/2025 o del 20 al 25 de agosto'
      );
      await establecerEstado(remitente, STATES.DATES);
      break;

    case '3': // Actividades
      await safeSend(bot, remitente, generateDynamicMenu(actividadesData, 'actividades'));
      await establecerEstado(remitente, STATES.ACTIVITIES);
      break;

    case '4': // Contacto
      await safeSend(bot, remitente, 
        `üìû *Atenci√≥n 24/7:*\n` +
        `WhatsApp: http://wa.me/50499222188\n` +
        `Llamadas: 50499222188\n\n` +
        `üìû *Atenci√≥n 24/7:*\n` +
        `WhatsApp: http://wa.me/50499905880\n` +
        `Llamadas: 50499905880\n\n` +
        `Escribe "menu" para volver al men√∫ principal.`
      );
      break;

    case '5': // Clima
      try {
        const climaResponse = await weatherModule.getWeatherForecast();
        await safeSend(bot, remitente, climaResponse.message);
      } catch (error) {
        console.error('Error obteniendo clima:', error);
        await safeSend(bot, remitente, '‚ö†Ô∏è Error obteniendo pron√≥stico. Intenta m√°s tarde.');
      }
      break;

    case '6': // Preguntas Frecuentes
      await safeSend(bot, remitente, FAQ_CONTENT);
      break;

    case '7': // Compartir experiencia
      try {
        await sendShareExperienceInstructions(bot, remitente, establecerEstado);
      } catch (error) {
        console.error('Error al enviar instrucciones:', error);
        await safeSend(bot, remitente, '‚ö†Ô∏è Error al procesar tu solicitud');
      }
      break;

    case '8': // Soporte post-reserva
      try {
        await manejarPostReserva(bot, remitente, mensaje, establecerEstado);
      } catch (error) {
        console.error('Error en soporte post-reserva:', error);
        await safeSend(bot, remitente, '‚ö†Ô∏è Error en soporte post-reserva');
      }
      break;

    case '9': // Programa fidelidad
      await safeSend(bot, remitente, 'üíé *Programa Fidelidad*:\nAcumula puntos y obt√©n descuentos exclusivos.');
      break;

    default: // Opci√≥n inv√°lida
      await safeSend(bot, remitente, '‚ùå Opci√≥n inv√°lida. Usa el men√∫ num√©rico.');
      break;
  }
}

// FUNCI√ìN TEMPORAL PARA OPCI√ìN 8 (POST RESERVA)
async function manejarPostReserva(bot, remitente, mensaje, establecerEstado) {
  console.log('### FUNCI√ìN manejarPostReserva LLAMADA ###');
  console.log('### PAR√ÅMETROS:', { remitente, mensaje });
  
  try {
    const telefono = extraerTelefono(remitente);
    console.log('### TEL√âFONO EXTRA√çDO:', telefono);
    
    const reserva = await buscarReservaActivaOPendiente(telefono);
    console.log('### RESERVA ENCONTRADA:', reserva);
    
    if (!reserva) {
      await bot.sendMessage(remitente, {
        text: '‚ö†Ô∏è No encontramos reservas activas o pendientes asociadas a este n√∫mero.\n\n' +
              'üîπ Solo pueden acceder usuarios con:\n' +
              '   ‚Ä¢ Reservas activas (confirmadas)\n' +
              '   ‚Ä¢ Reservas pendientes (esperando comprobante)\n\n' +
              '1. Hablar con un agente\n' +
              '2. Volver al men√∫ principal\n\n' +
              'Por favor, responde con 1 o 2.\n\nEscribe "menu" para ir al men√∫ principal.'
      });
      await establecerEstado(remitente, 'post_reserva_no_reserva');
      return;
    }

    if (mensaje === '8') {
      let menuTexto = 'üéØ *AYUDA POST RESERVA*\n\n';
      
      if (reserva.tipo === 'pendiente') {
        menuTexto += 'üìã Estado: *Pendiente de comprobante*\n';
        menuTexto += `üìÖ Reserva ID: ${reserva.reservation_id}\n`;
        menuTexto += `üë§ Hu√©sped: ${reserva.guest_name}\n\n`;
        menuTexto += '1. üìé Enviar Comprobante\n';
      } else {
        menuTexto += 'üìã Estado: *Reserva confirmada*\n';
        menuTexto += `üìÖ Reserva ID: ${reserva.reservation_id}\n`;
        menuTexto += `üë§ Hu√©sped: ${reserva.guest_name}\n\n`;
        menuTexto += '1. üîê Informaci√≥n de acceso\n';
      }
      
      menuTexto += '2. ‚úèÔ∏è Modificar reserva\n';
      menuTexto += '3. ‚ùå Cancelar reserva\n';
      menuTexto += '4. üÜò Solicitar asistencia\n\n';
      menuTexto += 'Responde con el n√∫mero de tu opci√≥n.\n\nEscribe "menu" para ir al men√∫ principal.';
      
      console.log('### ENVIANDO MEN√ö ###');
      await bot.sendMessage(remitente, { text: menuTexto });
      await establecerEstado(remitente, 'post_reserva_menu', { reserva });
      console.log('### MEN√ö ENVIADO Y ESTADO ESTABLECIDO ###');
      return;
    }
    
  } catch (error) {
    console.error('Error en manejarPostReserva:', error);
    await bot.sendMessage(remitente, {
      text: 'Lo siento, ocurri√≥ un error. Por favor intenta de nuevo m√°s tarde.\n\nEscribe "menu" para ir al men√∫ principal.'
    });
  }
}

// Funci√≥n auxiliar para buscar reservas
async function buscarReservaActivaOPendiente(telefono) {
  console.log('### EJECUTANDO buscarReservaActivaOPendiente ###');
  console.log('### TELEFONO:', telefono);
  
  try {
    const { runQuery } = require('../db');
    
    const sql = `
      SELECT r.*, u.name as guest_name, u.phone_number,
             r.start_date as check_in_date, r.end_date as check_out_date
      FROM Reservations r
      JOIN Users u ON r.user_id = u.user_id
      WHERE u.phone_number = ? AND r.status IN ('confirmada', 'confirmado', 'pendiente')
      ORDER BY r.created_at DESC
      LIMIT 1
    `;
    
    console.log('[DEBUG] SQL:', sql);
    const rows = await runQuery(sql, [telefono]);
    console.log('[DEBUG] Rows:', rows);
    
    if (rows && rows.length > 0) {
      const reserva = rows[0];
      
      let tipo = 'activa';
      if (reserva.status === 'pendiente') {
        tipo = 'pendiente';
      }
      
      const resultado = { ...reserva, tipo };
      console.log('[DEBUG] Resultado:', resultado);
      return resultado;
    }

    console.log('[DEBUG] No reservas encontradas');
    return null;
  } catch (error) {
    console.error('Error buscando reserva:', error);
    return null;
  }
}

module.exports = {
  handleMainMenuOptions,
  STATES // Exportamos estados si se necesitan en otros m√≥dulos
};