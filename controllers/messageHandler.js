/**
 * M√≥dulo profesional con logger para producci√≥n
 */

const { establecerEstado, obtenerEstado, establecerUltimoSaludo, obtenerUltimoSaludo } = require('../services/stateService');
const constants = require('./constants');
const { handleMainMenuOptions } = require('../controllers/mainMenuHandler');
const { exportarReservasAExcel } = require('../services/reservaExportService');
const path = require('path');
const logger = require('../config/logger'); // Logger profesional

// Funci√≥n segura para cargar datos de caba√±as
async function cargarCabanas() {
    try {
        const cabanasPath = path.resolve(__dirname, '../data/caba√±as.json');
        delete require.cache[require.resolve(cabanasPath)];
        const data = require(cabanasPath);
        
        if (!Array.isArray(data)) {
            throw new Error('Formato inv√°lido de caba√±as: no es un array');
        }
        
        return data;
    } catch (error) {
        logger.error(`Error cargando caba√±as: ${error.message}`, {
            stack: error.stack,
            module: 'cargarCabanas'
        });
        throw new Error('Error al cargar informaci√≥n de caba√±as');
    }
}

async function enviarMenuPrincipal(bot, remitente) {
    try {
        await establecerEstado(remitente, 'MENU_PRINCIPAL');
        await bot.sendMessage(remitente, { text: constants.MENU_PRINCIPAL });
        logger.info(`Men√∫ principal enviado a ${remitente}`);
    } catch (error) {
        logger.error(`Error enviando men√∫ principal a ${remitente}: ${error.message}`, {
            stack: error.stack,
            userId: remitente
        });
        
        try {
            await bot.sendMessage(remitente, { 
                text: '‚ö†Ô∏è No pude cargar el men√∫ principal. Por favor intenta m√°s tarde.' 
            });
        } catch (fallbackError) {
            logger.critical(`Error cr√≠tico de comunicaci√≥n con ${remitente}: ${fallbackError.message}`, {
                stack: fallbackError.stack,
                userId: remitente
            });
        }
    }
}

async function enviarMenuCabanas(bot, remitente) {
    try {
        const caba√±as = await cargarCabanas();
        
        if (caba√±as.length === 0) {
            await bot.sendMessage(remitente, { text: '‚ö†Ô∏è No hay caba√±as disponibles en este momento.' });
            await enviarMenuPrincipal(bot, remitente);
            return;
        }
        
        await establecerEstado(remitente, 'LISTA_CABA√ëAS');
        
        const menuCabanas = `üå¥ Caba√±as Disponibles:\n` +
            caba√±as.map((caba√±a, index) => `${index + 1}. ${caba√±a.nombre || 'Caba√±a sin nombre'}`).join('\n') +
            `\n0. Volver ‚Ü©Ô∏è\nPor favor, selecciona el n√∫mero de la caba√±a para ver m√°s detalles.`;
        
        await bot.sendMessage(remitente, { text: menuCabanas });
        logger.info(`Men√∫ caba√±as enviado a ${remitente}`);
        
    } catch (error) {
        logger.error(`Error enviando men√∫ de caba√±as a ${remitente}: ${error.message}`, {
            stack: error.stack,
            userId: remitente
        });
        
        try {
            await bot.sendMessage(remitente, { 
                text: '‚ö†Ô∏è No pude cargar la lista de caba√±as. Por favor intenta m√°s tarde.' 
            });
            await enviarMenuPrincipal(bot, remitente);
        } catch (fallbackError) {
            logger.critical(`Error de comunicaci√≥n con ${remitente}: ${fallbackError.message}`, {
                stack: fallbackError.stack,
                userId: remitente
            });
        }
    }
}

async function enviarDetalleCaba√±a(bot, remitente, seleccion) {
    try {
        const caba√±as = await cargarCabanas();
        
        const seleccionNum = parseInt(seleccion);
        if (isNaN(seleccionNum) || seleccionNum < 1 || seleccionNum > caba√±as.length) {
            await bot.sendMessage(remitente, { text: '‚ö†Ô∏è Selecci√≥n inv√°lida. Por favor, ingresa un n√∫mero v√°lido del men√∫.' });
            await enviarMenuCabanas(bot, remitente);
            return;
        }
        
        const caba√±a = caba√±as[seleccionNum - 1];
        if (!caba√±a || typeof caba√±a !== 'object') {
            throw new Error('Caba√±a seleccionada no v√°lida');
        }
        
        await establecerEstado(remitente, 'DETALLE_CABA√ëA', { seleccion: seleccionNum });
        
        const nombre = caba√±a.nombre || 'Caba√±a sin nombre';
        const tipo = caba√±a.tipo || 'Tipo no especificado';
        const descripcion = caba√±a.descripcion || 'Descripci√≥n no disponible';
        
        let detalles = `üèñÔ∏è *${nombre}* (${tipo})\n\n${descripcion}\n\n`;
        detalles += `üîÑ ¬øSiguiente paso?\n1. ‚Üê Ver todas las caba√±as\n2. Reservar esta caba√±a\n0. Men√∫ principal üè†`;
        
        try {
            const medios = caba√±a.fotos || [];
            const urlsValidas = medios.filter(url => {
                try {
                    new URL(url);
                    return true;
                } catch {
                    logger.warn(`URL inv√°lida en caba√±a ${nombre}: ${url}`);
                    return false;
                }
            });

            const imageUrls = urlsValidas.filter(url => /\.(jpg|jpeg|png|gif|webp)$/i.test(url));
            const videoUrls = urlsValidas.filter(url => /\.(mp4|mov|avi|mkv)$/i.test(url));

            if (imageUrls.length > 0) {
                await bot.sendMessage(remitente, {
                    image: { url: imageUrls[0] },
                    caption: detalles
                });
                
                for (let i = 1; i < imageUrls.length; i++) {
                    await bot.sendMessage(remitente, {
                        image: { url: imageUrls[i] }
                    });
                }
            } else {
                await bot.sendMessage(remitente, { text: detalles });
            }

            for (const videoUrl of videoUrls) {
                try {
                    await bot.sendMessage(remitente, {
                        video: { url: videoUrl }
                    });
                } catch (videoError) {
                    logger.warn(`Error enviando video a ${remitente}: ${videoError.message}`, {
                        url: videoUrl
                    });
                }
            }
            
            await bot.sendMessage(remitente, { 
                text: 'Selecciona:\n1: Ver m√°s alojamientos\n0: Men√∫ principal\n2: Reservar esta caba√±a'
            });
            
            logger.info(`Detalles de caba√±a enviados a ${remitente}: ${nombre}`);
            
        } catch (mediaError) {
            logger.error(`Error enviando medios a ${remitente}: ${mediaError.message}`, {
                stack: mediaError.stack,
                userId: remitente
            });
            
            await bot.sendMessage(remitente, { text: detalles });
            await bot.sendMessage(remitente, { 
                text: 'Selecciona:\n1: Ver m√°s alojamientos\n0: Men√∫ principal\n2: Reservar esta caba√±a'
            });
        }
        
    } catch (error) {
        logger.error(`Error enviando detalles de caba√±a a ${remitente}: ${error.message}`, {
            stack: error.stack,
            userId: remitente,
            seleccion
        });
        
        try {
            await bot.sendMessage(remitente, { 
                text: '‚ö†Ô∏è No pude cargar los detalles de la caba√±a. Por favor intenta seleccionar otra.' 
            });
            await enviarMenuCabanas(bot, remitente);
        } catch (fallbackError) {
            logger.critical(`Error de comunicaci√≥n con ${remitente}: ${fallbackError.message}`, {
                stack: fallbackError.stack,
                userId: remitente
            });
        }
    }
}

async function procesarMensaje(bot, remitente, mensaje, mensajeObj) {
    if (!remitente || typeof remitente !== 'string' || remitente.trim() === '') {
        logger.error('Remitente inv√°lido en procesarMensaje', {
            mensaje,
            mensajeObj
        });
        return;
    }

    const mensajeTexto = mensaje || '';
    const textoMinuscula = mensajeTexto.toLowerCase().trim();

    try {
        const hoy = new Date().toISOString().slice(0, 10);
        const ultimoSaludo = obtenerUltimoSaludo(remitente) || '';
        
        if (ultimoSaludo !== hoy) {
            await establecerUltimoSaludo(remitente, hoy);
            const saludo = `üå¥ ¬°Bienvenido(a) a Villas Julie! üèñÔ∏è Tu rinc√≥n ideal frente al mar te espera.`;
            
            try {
                await bot.sendMessage(remitente, { text: saludo });
            } catch (saludoError) {
                logger.warn(`Error enviando saludo a ${remitente}: ${saludoError.message}`, {
                    userId: remitente
                });
            }
            
            await enviarMenuPrincipal(bot, remitente);
            return;
        }

        if (textoMinuscula === 'menu' || textoMinuscula === 'men√∫') {
            await enviarMenuPrincipal(bot, remitente);
            return;
        }

        const estado = obtenerEstado(remitente) || { estado: 'MENU_PRINCIPAL' };
        logger.debug(`Procesando mensaje de ${remitente}: ${mensajeTexto}`, {
            estado: estado.estado
        });
        
switch (estado.estado) {
      case 'MENU_PRINCIPAL':
                if (mensajeTexto.trim() === '1') {
                    // Mostrar men√∫ de alojamientos directamente
                    await enviarMenuCabanas(bot, remitente);
                } else if (mensajeTexto.trim() === 'exportar reservas') {
                    try {
                        const rutaArchivo = await exportarReservasAExcel();
                        await bot.sendMessage(remitente, { text: `Reservas exportadas exitosamente. Archivo guardado en: ${rutaArchivo}` });
                    } catch (error) {
                        await bot.sendMessage(remitente, { text: 'Error al exportar las reservas. Por favor intenta m√°s tarde.' });
                    }
                } else {
                    await handleMainMenuOptions(bot, remitente, mensajeTexto.trim(), establecerEstado);
                }
                break;

            case 'LISTA_CABA√ëAS':
                if (mensajeTexto.trim() === '0') {
                    await enviarMenuPrincipal(bot, remitente);
                } else {
                    const seleccion = parseInt(mensajeTexto.trim());
                    if (isNaN(seleccion)) {
                        await bot.sendMessage(remitente, { 
                            text: '‚ö†Ô∏è Por favor ingresa solo el n√∫mero de la caba√±a que deseas ver.' 
                        });
                        await enviarMenuCabanas(bot, remitente);
                    } else {
                        await enviarDetalleCaba√±a(bot, remitente, seleccion);
                    }
                }
                break;

            case 'DETALLE_CABA√ëA':
                switch (mensajeTexto.trim().toLowerCase()) {
                    case '1':
                        await enviarMenuCabanas(bot, remitente);
                        break;
                    case '2':
                        await bot.sendMessage(remitente, { 
                            text: 'Funcionalidad de reserva a√∫n no implementada. Ser√°s redirigido al men√∫ principal.' 
                        });
                        await enviarMenuPrincipal(bot, remitente);
                        break;
                    case '0':
                        await enviarMenuPrincipal(bot, remitente);
                        break;
                    default:
                        await bot.sendMessage(remitente, { 
                            text: '‚ö†Ô∏è Opci√≥n no reconocida. Por favor selecciona una opci√≥n v√°lida.' 
                        });
                        if (estado.datos && estado.datos.seleccion) {
                            await enviarDetalleCaba√±a(bot, remitente, estado.datos.seleccion);
                        } else {
                            await enviarMenuCabanas(bot, remitente);
                        }
                        break;
                }
                break;

            default:
                logger.warn(`Estado no manejado: ${estado.estado}`, {
                    userId: remitente
                });
                
                await bot.sendMessage(remitente, { 
                    text: '‚ö†Ô∏è Ocurri√≥ un error inesperado. Reiniciando tu sesi√≥n...' 
                });
                await enviarMenuPrincipal(bot, remitente);
                break;
        }
    } catch (error) {
        logger.error(`Error cr√≠tico en procesarMensaje para ${remitente}: ${error.message}`, {
            stack: error.stack,
            userId: remitente,
            mensaje
        });
        
        try {
            await bot.sendMessage(remitente, { 
                text: '‚ö†Ô∏è Ocurri√≥ un error procesando tu solicitud. Por favor intenta de nuevo m√°s tarde.' 
            });
            await establecerEstado(remitente, 'MENU_PRINCIPAL');
            await bot.sendMessage(remitente, { text: constants.MENU_PRINCIPAL });
        } catch (fallbackError) {
            logger.critical(`Error de comunicaci√≥n cr√≠tico con ${remitente}: ${fallbackError.message}`, {
                stack: fallbackError.stack,
                userId: remitente
            });
        }
    }
}

module.exports = {
    enviarMenuPrincipal,
    procesarMensaje
};
