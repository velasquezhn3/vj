const { loadActividades } = require('../services/menuActivitiesService');
const { safeSend } = require('../utils/utils'); // Asumiendo que safeSend est√° en utils

// Funci√≥n para generar detalles textuales de una actividad
const generateActivityDetails = (actividad) => {
  let detalles = `ÔøΩ *${actividad.nombre}*\n`;
  
  if (actividad.categoria) {
    detalles += `ÔøΩ Categor√≠a: ${actividad.categoria}\n`;
  }
  
  if (actividad.ubicacion && actividad.ubicacion.direccion) {
    detalles += `ÔøΩüìç Ubicaci√≥n: ${actividad.ubicacion.direccion}\n`;
  }
  
  if (actividad.duracion) {
    detalles += `‚è∞ Duraci√≥n: ${actividad.duracion}\n`;
  }
  
  if (actividad.precios) {
    if (actividad.precios.adulto) {
      detalles += `üí∞ Precio adulto: L. ${actividad.precios.adulto}\n`;
    }
    if (actividad.precios.nino) {
      detalles += `üí∞ Precio ni√±o: L. ${actividad.precios.nino}\n`;
    }
  }
  
  if (actividad.horarios && actividad.horarios.general) {
    detalles += `üìÖ Horarios: ${actividad.horarios.general}\n`;
  }
  
  const descripcion = actividad.descripcionCorta || actividad.descripcion_corta || actividad.descripcion;
  if (descripcion) {
    detalles += `üìù Descripci√≥n: ${descripcion}\n\n`;
  }
  
  if (actividad.servicios && Array.isArray(actividad.servicios) && actividad.servicios.length > 0) {
    detalles += `‚ú® Servicios incluidos:\n`;
    detalles += actividad.servicios.map(servicio => `‚Ä¢ ${servicio}`).join('\n') + '\n\n';
  }
  
  if (actividad.recomendaciones && actividad.recomendaciones.queTraer && Array.isArray(actividad.recomendaciones.queTraer) && actividad.recomendaciones.queTraer.length > 0) {
    detalles += `üéí Qu√© traer:\n`;
    detalles += actividad.recomendaciones.queTraer.map(item => `‚Ä¢ ${item}`).join('\n') + '\n\n';
  }
  
  if (actividad.contacto) {
    detalles += `üìû Contacto:\n`;
    if (actividad.contacto.telefono) {
      detalles += `‚Ä¢ Tel√©fono: ${actividad.contacto.telefono}\n`;
    }
    if (actividad.contacto.whatsapp) {
      detalles += `‚Ä¢ WhatsApp: ${actividad.contacto.whatsapp}\n`;
    }
    if (actividad.contacto.email) {
      detalles += `‚Ä¢ Email: ${actividad.contacto.email}\n`;
    }
    if (actividad.contacto.sitioWeb) {
      detalles += `‚Ä¢ Sitio Web: ${actividad.contacto.sitioWeb}\n`;
    }
    
    if (actividad.contacto.redesSociales && typeof actividad.contacto.redesSociales === 'object') {
      const redes = Object.keys(actividad.contacto.redesSociales);
      if (redes.length > 0) {
        detalles += `‚Ä¢ Redes Sociales:\n`;
        detalles += Object.entries(actividad.contacto.redesSociales)
          .map(([key, value]) => `  - ${key}: ${value}`)
          .join('\n') + '\n';
      }
    }
  }
  
  return detalles;
};

// Funci√≥n para enviar fotos de actividad
const sendActivityPhotos = async (bot, remitente, multimedia) => {
  if (!multimedia) return;
  
  try {
    // Enviar foto principal
    if (multimedia.fotoPrincipal) {
      await bot.sendMessage(remitente, { image: { url: multimedia.fotoPrincipal } });
    }
    
    // Enviar galer√≠a si existe
    if (multimedia.galeria?.length > 0) {
      for (const url of multimedia.galeria) {
        await bot.sendMessage(remitente, { image: { url } });
      }
    }
  } catch (error) {
    console.error('Error enviando fotos de actividad:', error);
    await safeSend(bot, remitente, '‚ö†Ô∏è No se pudieron cargar las fotos de la actividad');
  }
};

// Handler para flujo de actividades
const flowActividadesHandler = async (ctx, { flowDynamic, endFlow }) => {
  try {
    const actividades = await loadActividades();
    
    if (!actividades || actividades.length === 0) {
      await flowDynamic('‚ö†Ô∏è No hay actividades disponibles en este momento.');
      return endFlow();
    }
    
    // Generar men√∫ din√°mico
    const menu = [
      'Tenemos estas actividades disponibles:',
      ...actividades.map((act, idx) => `${idx + 1}. ${act.nombre}`),
      'Selecciona el n√∫mero de la actividad para ver m√°s detalles.'
    ].join('\n');
    
    await flowDynamic(menu);

    // Validar selecci√≥n
    const seleccion = parseInt(ctx.body.trim());
    if (isNaN(seleccion)) {
      await flowDynamic('‚ö†Ô∏è Por favor ingresa solo el n√∫mero de la actividad.');
      return endFlow();
    }
    
    if (seleccion < 1 || seleccion > actividades.length) {
      await flowDynamic(`‚ö†Ô∏è Selecci√≥n inv√°lida. Ingresa un n√∫mero entre 1 y ${actividades.length}.`);
      return endFlow();
    }
    
    const actividad = actividades[seleccion - 1];
    const detalles = generateActivityDetails(actividad);
    
    await flowDynamic(detalles);
    
    // Notificar sobre fotos si existen
    if (actividad.multimedia) {
      await flowDynamic('üñºÔ∏è Enviando fotos de la actividad...');
    }
    
  } catch (error) {
    console.error('Error en flowActividadesHandler:', error);
    await flowDynamic('‚ö†Ô∏è Ocurri√≥ un error al procesar las actividades. Por favor intenta m√°s tarde.');
    return endFlow();
  }
};

// Enviar detalles de actividad espec√≠fica
const sendActividadDetails = async (bot, remitente, seleccion, establecerEstado = null) => {
  try {
    const actividades = await loadActividades();
    
    if (!actividades || actividades.length === 0) {
      await safeSend(bot, remitente, '‚ö†Ô∏è No hay actividades disponibles en este momento.');
      return;
    }
    
    if (isNaN(seleccion)) {
      await safeSend(bot, remitente, '‚ö†Ô∏è Por favor ingresa solo el n√∫mero de la actividad.');
      return;
    }
    
    if (seleccion < 1 || seleccion > actividades.length) {
      await safeSend(bot, remitente, `‚ö†Ô∏è Selecci√≥n inv√°lida. Ingresa un n√∫mero entre 1 y ${actividades.length}.`);
      return;
    }
    
    const actividad = actividades[seleccion - 1];
    const detalles = generateActivityDetails(actividad);
    
    // Enviar foto principal como imagen con caption si existe
    if (actividad.multimedia?.fotoPrincipal) {
      try {
        await bot.sendMessage(remitente, {
          image: { url: actividad.multimedia.fotoPrincipal },
          caption: detalles
        });
      } catch (error) {
        console.error('Error enviando imagen principal, enviando solo texto:', error);
        await safeSend(bot, remitente, detalles);
      }
    } else {
      await safeSend(bot, remitente, detalles);
    }
    
    // Enviar fotos adicionales de la galer√≠a
    await sendActivityPhotos(bot, remitente, actividad.multimedia);
    
    // Enviar men√∫ post-actividad despu√©s de las fotos
    const menuPostActividad = `\nüîÑ *¬øQu√© deseas hacer ahora?*\n1Ô∏è‚É£ Ver m√°s actividades\n0Ô∏è‚É£ Men√∫ principal`;
    await safeSend(bot, remitente, menuPostActividad);
    
    // Establecer estado post-actividad si se proporciona la funci√≥n
    if (establecerEstado && typeof establecerEstado === 'function') {
      await establecerEstado(remitente, 'post_actividad');
    }
    
  } catch (error) {
    console.error('Error en sendActividadDetails:', error);
    await safeSend(bot, remitente, '‚ö†Ô∏è Ocurri√≥ un error al mostrar la actividad. Por favor intenta m√°s tarde.');
  }
};

module.exports = { 
  flowActividadesHandler, 
  sendActividadDetails 
};