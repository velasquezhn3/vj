const logger = require('../../config/logger');
const { safeSend, GRUPO_JID } = require('../../utils/utils');
const alojamientosService = require('../../services/alojamientosService');
const Reserva = require('../../models/Reserva');
const { runQuery } = require('../../db');
const { upsertUser, createReservationWithUser, normalizePhoneNumber, getUserByPhone, getReservationDetailsById } = require('../../services/reservaService');
const { eliminarComprobante } = require('../../services/comprobanteService');
const { obtenerEstado } = require('../../services/stateService');
const { handleConfirmarCommand } = require('./reservationHandlers'); // Importar la funci√≥n robusta
const fs = require('fs');
const path = require('path');

// Helper function to send detailed reservation info to group
async function enviarReservaAlGrupo(bot, reserva) {
    try {
        const resumen = `
üìù *NUEVA RESERVA - COMPROBANTE RECIBIDO*
--------------------------------------
üÜî ID: ${reserva.reservation_id || reserva._id}
üë§ Nombre: ${reserva.nombre}
üìû Tel√©fono: ${reserva.telefono}
üìÖ Fechas: ${reserva.fechaEntrada || reserva.start_date} ‚Üí ${reserva.fechaSalida || reserva.end_date}
üë• Personas: ${reserva.personas}
üè† Alojamiento: ${reserva.alojamiento || (reserva.alojamiento && reserva.alojamiento.nombre) || 'N/A'}
üíµ Total: $${reserva.precioTotal || reserva.total_price}
--------------------------------------
‚úÖ Usa /reservado ${reserva.reservation_id || reserva._id} para confirmar
‚ùå Usa /cancelar ${reserva.reservation_id || reserva._id} para rechazar
        `;
        await safeSend(bot, GRUPO_JID, resumen);
    } catch (error) {
        console.error('[ERROR] enviarReservaAlGrupo:', error);
    }
}

// Comandos v√°lidos para grupos
const GROUP_COMMANDS = {
    CONFIRMAR: '/confirmar',
    RESERVADO: '/reservado',
    CANCELAR: '/cancelar'
};

// Manejadores espec√≠ficos para comandos de grupo
const groupCommandHandlers = {
    [GROUP_COMMANDS.CONFIRMAR]: handleConfirmarCommand,
    [GROUP_COMMANDS.RESERVADO]: handleReservadoCommand,
    [GROUP_COMMANDS.CANCELAR]: handleCancelarCommand
};

async function handleReservadoCommand(bot, remitente, param) {
    if (!param) {
        await bot.sendMessage(remitente, { text: '‚ùå Por favor proporciona el ID de la reserva. Uso: /reservado [ID]' });
        return;
    }

    try {
        const { getReservationDetailsById } = require('../../services/reservaService');
        const reserva = await getReservationDetailsById(param);
        console.log('[DEBUG] Reserva fetched with details:', reserva);
        if (!reserva) {
            await bot.sendMessage(remitente, { text: `‚ùå No se encontr√≥ reserva con ID ${param}` });
            return;
        }

        if (!reserva.status || reserva.status.trim().toLowerCase() !== 'pendiente') {
            await bot.sendMessage(remitente, { text: `‚ö†Ô∏è La reserva #${param} no est√° en estado pendiente.` });
            return;
        }

        const updatedReserva = await Reserva.updateEstado(param, 'confirmado');
        if (!updatedReserva) {
            await bot.sendMessage(remitente, { text: '‚ö†Ô∏è Error al actualizar el estado de la reserva. Intenta nuevamente.' });
            return;
        }

        await bot.sendMessage(remitente, { text: `‚úÖ Reserva #${param} confirmada exitosamente.` });

        // Enviar resumen detallado al grupo con full details
        await enviarReservaAlGrupo(bot, reserva);

        // Enviar mensaje privado al usuario con detalles de la reserva y mensaje cordial
        const userJid = `${reserva.telefono}@s.whatsapp.net`;
        const mensajePrivado = `
üåü ¬°Hola ${reserva.nombre || 'Cliente'}!

Gracias por confiar en nosotros. üéâ *¬°Tu reserva ha sido confirmada con √©xito!*

üîπ **Detalles de tu reserva:**
   - üóìÔ∏è Fechas: Del ${reserva.fechaEntrada || reserva.start_date} al ${reserva.fechaSalida || reserva.end_date}
   - üë• Personas: ${reserva.personas} ${reserva.personas > 1 ? 'hu√©spedes' : 'hu√©sped'}
   - üè° Alojamiento: ${reserva.alojamiento || 'Se asignar√° pr√≥ximamente'}
   - üí∞ Precio total: $${reserva.precioTotal || reserva.total_price}
   - üîë C√≥digo de reserva: ${param}

üíº *Tu itinerario:*
   ‚Ä¢ D√≠a de llegada: Recepci√≥n a partir de las 02:00 PM
   ‚Ä¢ D√≠a de salida: Habitaci√≥n disponible hasta las 11:00 AM

üì¨ ¬øNecesitas modificar algo o tienes preguntas? 
   Estamos disponibles en:
   üì± 50499905880
   üì± 50499705022

‚ú® ¬°Preparamos todo con ilusi√≥n para darte una experiencia inolvidable! 
Deseamos que tu estancia sea perfecta en cada detalle.

Con cari√±o,
El Equipo de Reservas üè®üíñ

‚ÑπÔ∏è *Informaci√≥n importante:*
   - Importante 1
   - Importante 2
`;
        await bot.sendMessage(userJid, { text: mensajePrivado.trim() });

    } catch (error) {
        console.error('[ERROR] handleReservadoCommand:', error);
        await bot.sendMessage(remitente, { text: '‚ö†Ô∏è Error procesando el comando /reservado. Intenta nuevamente.' });
    }
}

async function handleGroupCommand(bot, remitente, mensajeTexto, mensajeObj) {
    const [command, param] = mensajeTexto.split(' ');

    if (!(command in groupCommandHandlers)) {
        logger.warn(`Comando no v√°lido en grupo: ${mensajeTexto}`);
        await bot.sendMessage(remitente, { 
            text: '‚ùå Comando no v√°lido. Usa /confirmar, /confirmado, /reservado, /reservar o /cancelar.' 
        });
        return;
    }

    try {
        // Pass mensajeObj to handlers to allow extracting remoteJid
        await groupCommandHandlers[command](bot, remitente, param, mensajeObj);
    } catch (error) {
        logger.error(`Error procesando comando ${command}: ${error.message}`, { error });
        await bot.sendMessage(remitente, { 
            text: '‚ö†Ô∏è Error procesando el comando. Por favor intenta nuevamente.' 
        });
    }
}

async function handleCancelarCommand(bot, remitente, telefono) {
    if (!telefono) {
        await bot.sendMessage(remitente, { text: '‚ùå Por favor proporciona un n√∫mero de tel√©fono. Uso: /cancelar [telefono]' });
        return;
    }

    // Buscar reserva pendiente o con comprobante por tel√©fono
    const reservation = await alojamientosService.getReservationByPhoneAndStatus(telefono, 'comprobante_recibido');
    if (!reservation) {
        await bot.sendMessage(remitente, { text: `‚ùå No se encontr√≥ reserva con comprobante para el tel√©fono ${telefono}` });
        return;
    }

    try {
        // Eliminar comprobante y actualizar estado a cancelada
        await eliminarComprobante(reservation.reservation_id);

        // Notificar al usuario para enviar comprobante v√°lido
        const userJid = `${telefono}@s.whatsapp.net`;
        await bot.sendMessage(userJid, { 
            text: '‚ùå Tu comprobante fue rechazado. Por favor env√≠a un comprobante v√°lido para continuar con la reserva.' 
        });

        // Notificar al grupo
        await bot.sendMessage(GRUPO_JID, { 
            text: `‚ùå Comprobante rechazado para la reserva #${reservation.reservation_id} del tel√©fono ${telefono}. Se solicit√≥ comprobante v√°lido.` 
        });

        // Confirmar al remitente que la acci√≥n fue realizada
        await bot.sendMessage(remitente, { 
            text: `‚úÖ Comprobante eliminado y estado actualizado a cancelada para la reserva #${reservation.reservation_id}.` 
        });
    } catch (error) {
        logger.error(`Error en handleCancelarCommand: ${error.message}`, { error });
        await bot.sendMessage(remitente, { text: '‚ö†Ô∏è Error al procesar la cancelaci√≥n. Intenta nuevamente.' });
    }
}

async function handleConfirmadoCommand(bot, remitente, telefono, mensajeObj) {
    // Ignore telefono param, use remoteJid from mensajeObj to get full phone number with country code
    const userId = mensajeObj?.key?.remoteJid?.split('@')[0];

    if (!userId) {
        await bot.sendMessage(remitente, { text: '‚ùå No se pudo obtener el n√∫mero de tel√©fono del usuario.' });
        return;
    }

    // Buscar reserva pendiente por tel√©fono usando userId con c√≥digo de pa√≠s
    const reservation = await alojamientosService.getReservationByPhoneAndStatus(userId, 'pendiente');
    if (!reservation) {
        await bot.sendMessage(remitente, { text: `‚ùå No se encontr√≥ reserva pendiente para el tel√©fono ${userId}` });
        return;
    }

    // Confirmar reserva (guardar con estado pendiente si no existe)
    const success = await alojamientosService.updateReservationStatus(reservation.reservation_id, 'pendiente');
    if (!success) {
        await bot.sendMessage(remitente, { text: '‚ö†Ô∏è Error al guardar la reserva. Intenta nuevamente.' });
        return;
    }

    await bot.sendMessage(remitente, { text: `‚úÖ Reserva #${reservation.reservation_id} guardada exitosamente con estado pendiente.` });

    // Enviar instrucciones de dep√≥sito al usuario
    const depositAmount = Math.ceil(reservation.total * 0.5);
    const depositMessage = 
`Hola ${reservation.nombre}, tu reserva #${reservation.reservation_id} ha sido guardada con estado pendiente.\n
‚ö†Ô∏è Tienes 24 horas para depositar el 50% ($ ${depositAmount}).\n
Por favor realiza el dep√≥sito a la siguiente cuenta:\n
Banco: Banco Ejemplo\n
N√∫mero de cuenta: 123456789\n
Titular: Empresa Ejemplo\n
Una vez realizado el dep√≥sito, env√≠a el comprobante aqu√≠.`;

    const userJid = `${userId}@s.whatsapp.net`;

    try {
        const sent = await bot.sendMessage(userJid, { text: depositMessage });
        logger.info(`Mensaje de instrucciones de dep√≥sito enviado a ${userJid}`, { sent });
    } catch (err) {
        logger.error(`Error enviando instrucciones de dep√≥sito a ${userJid}: ${err.message}`, { err });
    }
}

module.exports = {
    handleGroupCommand,
    handleReservadoCommand,
    handleCancelarCommand,
    handleConfirmadoCommand,
    enviarReservaAlGrupo,
    GROUP_COMMANDS
};
