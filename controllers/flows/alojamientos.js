const fs = require('fs');
const path = require('path');
const moment = require('moment');
require('moment/locale/es');
const { addKeyword } = require('@bot-whatsapp/bot');

// 1. Sistema de archivos para "base de datos"
const DB_PATH = path.join(__dirname, '..', 'caba√±as.json');

// Crear archivo si no existe con datos iniciales
// Removed initial data creation to avoid overwriting user data
if (!fs.existsSync(DB_PATH)) {
  console.warn('Warning: caba√±as.json not found at expected path:', DB_PATH);
}

// Funci√≥n para cargar datos
const loadCaba√±as = () => {
  try {
    const data = fs.readFileSync(DB_PATH, 'utf8');
    console.log('Contenido cargado de caba√±as.json:', data);
    return JSON.parse(data);
  } catch (e) {
    console.error('Error al cargar caba√±as.json:', e);
    return [];
  }
};

// Funci√≥n para guardar datos
const saveCaba√±as = (data) => {
  fs.writeFileSync(DB_PATH, JSON.stringify(data, null, 2));
};

// Backup autom√°tico cada 24 horas
const backup = () => {
  const backupDir = path.join(__dirname, 'backups');
  if (!fs.existsSync(backupDir)) {
    fs.mkdirSync(backupDir);
  }
  const backupPath = path.join(backupDir, `caba√±as-${Date.now()}.json`);
  fs.copyFileSync(DB_PATH, backupPath);
};
setInterval(backup, 24 * 60 * 60 * 1000);

// Guardar datos con lock para evitar concurrencia
const safeSave = async (data) => {
  const lockFile = DB_PATH + '.lock';

  while (fs.existsSync(lockFile)) {
    await new Promise(resolve => setTimeout(resolve, 100));
  }

  try {
    fs.writeFileSync(lockFile, '');
    saveCaba√±as(data);
  } finally {
    fs.unlinkSync(lockFile);
  }
};

// 2. Funci√≥n para verificar disponibilidad
const checkDisponibilidad = (caba√±a, fechaEntrada, fechaSalida) => {
  return !caba√±a.reservas.some(reserva => {
    if (reserva.estado !== 'confirmada') return false;
    const resInicio = moment(reserva.fecha_inicio);
    const resFin = moment(reserva.fecha_fin);
    return fechaEntrada.isBefore(resFin) && fechaSalida.isAfter(resInicio);
  });
};

// 3. Funci√≥n para parsear fechas (mejorada)
const parsearFechas = (texto) => {
  const meses = {
    enero: 0, febrero: 1, marzo: 2, abril: 3, mayo: 4, junio: 5,
    julio: 6, agosto: 7, septiembre: 8, octubre: 9, noviembre: 10, diciembre: 11
  };
  
  // Manejar m√∫ltiples formatos: "15-18 agosto", "15 al 18 de agosto"
  const match = texto.match(/(\d{1,2})[\s\-]*(?:al?)?[\s\-]*(\d{1,2})?\s*(?:de)?\s*(\w+)/i);
  
  if (!match) return null;
  
  const diaIn = parseInt(match[1]);
  const mesNombre = match[3].toLowerCase();
  const a√±o = new Date().getFullYear();
  
  // Si no hay d√≠a final, usar mismo d√≠a (estad√≠a de 1 noche)
  const diaOut = match[2] ? parseInt(match[2]) : diaIn;
  
  return {
    entrada: moment(new Date(a√±o, meses[mesNombre], diaIn)),
    salida: moment(new Date(a√±o, meses[mesNombre], diaOut))
  };
};

// 4. Flujo principal actualizado
const flowAlojamientos = addKeyword(['1', 'alojamiento', 'caba√±as'])
  .addAnswer(
    async (ctx, { provider, flowDynamic, state }) => {
      const caba√±as = loadCaba√±as();
      if (caba√±as.length === 0) {
        await flowDynamic('‚ö†Ô∏è No hay caba√±as disponibles en este momento.');
        return;
      }
      let menu = 'Tenemos estas caba√±as disponibles:\n';
      caba√±as.forEach((caba√±a, index) => {
        menu += `${index + 1}. ${caba√±a.nombre}\n`;
      });
      menu += 'Por favor, selecciona el n√∫mero de la caba√±a para ver m√°s detalles.';
      await flowDynamic(menu);
    },
    { capture: true },
    async (ctx, { provider, flowDynamic, state, endFlow }) => {
      const caba√±as = loadCaba√±as();
      const seleccion = parseInt(ctx.body.trim());
      if (isNaN(seleccion) || seleccion < 1 || seleccion > caba√±as.length) {
        await flowDynamic('‚ö†Ô∏è Selecci√≥n inv√°lida. Por favor, ingresa un n√∫mero v√°lido del men√∫.');
        return endFlow();
      }
      const caba√±a = caba√±as[seleccion - 1];
      let detalles = `üèñÔ∏è *${caba√±a.nombre}* (${caba√±a.tipo})\n`;
      detalles += `üë• Capacidad: ${caba√±a.capacidad} personas\n`;
      detalles += `üõèÔ∏è Habitaciones: ${caba√±a.habitaciones} | üöø Ba√±os: ${caba√±a.ba√±os}\n`;
      detalles += `üí∞ Precio por noche: ${caba√±a.precio_noche.toLocaleString()} ${caba√±a.moneda}\n`;
      detalles += `üìç Ubicaci√≥n: ${caba√±a.ubicacion.ciudad}, ${caba√±a.ubicacion.departamento}\n\n`;
      detalles += `üõãÔ∏è Comodidades:\n`;
      caba√±a.comodidades.forEach(item => {
        detalles += `- ${item}\n`;
      });
      if (caba√±a.reservas && caba√±a.reservas.length > 0) {
        detalles += `\nüìÖ Fechas reservadas:\n`;
        caba√±a.reservas.forEach(reserva => {
          detalles += `- ${reserva.fecha_inicio} a ${reserva.fecha_fin} (${reserva.estado})\n`;
        });
      }
      if (caba√±a.fotos && caba√±a.fotos.length > 0) {
        detalles += `\nüñºÔ∏è Fotos:\n`;
        caba√±a.fotos.forEach(url => {
          detalles += `${url}\n`;
        });
      }
      await flowDynamic(detalles);
    }
  );

// 5. Funci√≥n para agregar reservas
const addReserva = async (caba√±aId, reservaData) => {
  const caba√±as = loadCaba√±as();
  const caba√±aIndex = caba√±as.findIndex(c => c.id === caba√±aId);
  
  if (caba√±aIndex !== -1) {
    caba√±as[caba√±aIndex].reservas.push(reservaData);
    await safeSave(caba√±as);
    return true;
  }
  return false;
};

module.exports = { flowAlojamientos, addReserva };
