const fs = require('fs');
const path = require('path');
const moment = require('moment');
require('moment/locale/es');
const { addKeyword } = require('@bot-whatsapp/bot');
const { loadMenuCabinTypes, checkDisponibilidad, parsearFechas } = require('../../services/menuCabinTypesService');
const { addReserva } = require('../../services/alojamientosService');

// ====================
// 1. Configuraci√≥n inicial
// ====================
const DB_PATH = path.join(__dirname, '..', 'caba√±as.json');
const BACKUP_DIR = path.join(__dirname, 'backups');
moment.locale('es');

// ====================
// 2. Funciones de utilidad
// ====================
const safeReadFile = (filePath) => {
  try {
    return fs.readFileSync(filePath, 'utf8');
  } catch (e) {
    console.error(`Error reading file ${filePath}:`, e);
    return null;
  }
};

const safeWriteFile = (filePath, data) => {
  try {
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2));
    return true;
  } catch (e) {
    console.error(`Error writing file ${filePath}:`, e);
    return false;
  }
};

// ====================
// 3. Gesti√≥n de datos - ACTUALIZADO PARA USAR TABLA CabinTypes
// ====================
// Funci√≥n mantenida para compatibilidad con el sistema de backup local
const loadCaba√±asLegacy = () => {
  const data = safeReadFile(DB_PATH);
  if (!data) {
    console.warn('No se encontr√≥ el archivo de caba√±as, creando uno vac√≠o');
    safeWriteFile(DB_PATH, []);
    return [];
  }
  
  try {
    return JSON.parse(data);
  } catch (e) {
    console.error('Error parsing caba√±as data:', e);
    return [];
  }
};

// Nueva funci√≥n que carga tipos de men√∫ desde tabla CabinTypes
const loadCaba√±as = loadMenuCabinTypes;

const createBackup = () => {
  try {
    if (!fs.existsSync(BACKUP_DIR)) {
      fs.mkdirSync(BACKUP_DIR, { recursive: true });
    }
    
    const timestamp = moment().format('YYYYMMDD_HHmmss');
    const backupPath = path.join(BACKUP_DIR, `caba√±as_${timestamp}.json`);
    fs.copyFileSync(DB_PATH, backupPath);
    
    // Mantener solo los √∫ltimos 5 backups
    const backups = fs.readdirSync(BACKUP_DIR)
      .filter(file => file.startsWith('caba√±as_') && file.endsWith('.json'))
      .sort()
      .reverse();
    
    if (backups.length > 5) {
      for (const file of backups.slice(5)) {
        fs.unlinkSync(path.join(BACKUP_DIR, file));
      }
    }
  } catch (e) {
    console.error('Error creating backup:', e);
  }
};

// Backup ya no es necesario - los datos est√°n en la base de datos

// ====================
// 4. Funciones de negocio (importadas del servicio)
// ====================
// Las funciones checkDisponibilidad y parsearFechas 
// ahora se importan desde menuCabinTypesService

// ====================
// 5. Descripciones modularizadas - ACTUALIZADAS
// ====================
const CABANA_DESCRIPCIONES = {
  tortuga: {
    nombre: 'Caba√±a Tortuga',
    descripcion: `Sera un placer atenderle en las bellas playas de Tela. üèùEn Villas Julie le ofrecemos un Apartamento de un cuarto üè† para un M√°ximo de 3 personas, ubicada a media cuadra de la mejor playa de Tela.

    **CUARTO**
    Cuenta con una cama matrimonial, una unipersonal, Aire Acondicionado y ba√±o. üõå üõÅ
    
    **COCINETA**  
    üç≥ Cocineta peque√±a con Refrigeradora peque√±a, Estufa de dos hornillas, Microondas, y accesorios b√°sicos de Cocina
    
    **√ÅREA DE PISCINA**
    Compartida con otros hu√©spedes, horario m√°ximo hasta las 9 p.m.
    Por seguridad NO se permite alimentos y bebidas en el √°rea de la piscina.
    üçó Hay un peque√±o asador de carne disponible (traer carb√≥n).
    
    **HORARIOS**
    Check-in: 2:00 PM | Check-out: 11:00 AM
    
    **SERVICIOS**
    üë©‚Äçüíª Wifi | üöó 1 parqueo
    
    **NORMAS**
    - NO se permiten visitas
    - üö´ NO mascotas üê∂
    - NO llevar toallas a la playa
    - üö≠ Prohibido fumar dentro
    - Respetar el silencio despu√©s de las 11 PM`
  },
  delfin: {
    nombre: 'Caba√±a Delf√≠n',
    descripcion: `Sera un placer atenderle en las bellas playas de Tela. üèùEn Villas Julie le ofrecemos una caba√±a de dos cuartos y dos ba√±os üè† para un M√°ximo de 6 personas.

    **CUARTOS** 
    - Principal: cama matrimonial + unipersonal, A/C, ba√±o
    - Secundario: cama matrimonial + unipersonal, A/C, ba√±o compartido
    
    **COCINA** 
    üç≥ Cocina completa con Refrigeradora, Estufa, Microondas, Cafetera
    
    **√ÅREAS COMUNES**
    üì∫ Sala con TV | üèä Piscina compartida (hasta 9 PM)
    üçó Asador disponible (traer carb√≥n)
    
    **HORARIOS**
    Check-in: 2:00 PM | Check-out: 11:00 AM
    
    **SERVICIOS**
    üë©‚Äçüíª Wifi | üöóüöô 2 parqueos
    
    **NORMAS**
    - NO visitas
    - üö´ NO mascotas
    - NO toallas en playa
    - üö≠ Prohibido fumar
    - Silencio despu√©s de 11 PM`
  },
  tiburon: {
    nombre: 'Caba√±a Tibur√≥n',
    descripcion: `Sera un placer atenderle en las bellas playas de Tela. üèù Caba√±a con tres cuartos y dos ba√±os para 9 personas.

    **CUARTOS**
    - Principal: cama matrimonial + unipersonal, A/C, ba√±o
    - Secundario: cama matrimonial + unipersonal, A/C
    - Terciario: 2 camas unipersonales, A/C
    
    **COCINA** 
    üç≥ Completa con Refrigeradora, Estufa, Microondas
    
    **√ÅREAS COMUNES**
    üì∫ Sala con TV | üèä Piscina compartida (hasta 9 PM)
    üçó Asador disponible (traer carb√≥n)
    
    **HORARIOS**
    Check-in: 2:00 PM | Check-out: 11:00 AM
    
    **SERVICIOS**
    üë©‚Äçüíª Wifi | üöóüöô 2 parqueos
    
    **NORMAS**
    - NO visitas
    - üö´ NO mascotas
    - NO toallas en playa
    - üö≠ Prohibido fumar
    - Silencio despu√©s de 11 PM`
  }
};

// ====================
// 6. Flujo de conversaci√≥n - ACTUALIZADO PARA BD
// ====================
const flowAlojamientos = addKeyword(['1', 'alojamiento', 'caba√±as'])
  .addAnswer(
    'üèñÔ∏è *Villas Julie - Opciones de Alojamiento*\n\n' +
    '1. Caba√±a Tortuga - Apartamento (1 cuarto, 3 personas)\n' +
    '2. Caba√±a Delf√≠n - Caba√±a (2 cuartos, 6 personas)\n' +
    '3. Caba√±a Tibur√≥n - Caba√±a (3 cuartos, 9 personas)\n\n' +
    'Por favor selecciona el n√∫mero de la opci√≥n que te interesa:',
    { capture: true },
    async (ctx, { flowDynamic, endFlow }) => {
      const caba√±as = await loadCaba√±as();
      const seleccion = parseInt(ctx.body.trim());

      if (isNaN(seleccion) || seleccion < 1 || seleccion > caba√±as.length) {
        await flowDynamic('‚ö†Ô∏è Selecci√≥n inv√°lida. Por favor ingresa solo el n√∫mero (1, 2 o 3).');
        return endFlow();
      }

      if (seleccion === 2) {
        // Redirect to reservation flow by setting user state and prompting for dates
        const { establecerEstado } = require('../../services/stateService');
        const { ESTADOS_RESERVA } = require('../reservaConstants');
        await establecerEstado(ctx.from, ESTADOS_RESERVA.FECHAS);
        await flowDynamic('Has seleccionado reservar una caba√±a. Por favor ingresa las fechas de tu estad√≠a (ej: "20/08/2025 - 25/08/2025"):');
        return endFlow();
      }

      const caba√±a = caba√±as[seleccion - 1];
      
      // Determinar el tipo correcto basado en la capacidad y nombre
      let caba√±aKey = 'tortuga'; // default
      if (caba√±a.capacidad >= 9 || caba√±a.type === 'tiburon') {
        caba√±aKey = 'tiburon';
      } else if (caba√±a.capacidad >= 6 || caba√±a.type === 'delfin') {
        caba√±aKey = 'delfin';
      }

      // Enviar descripci√≥n en partes
      const descParts = CABANA_DESCRIPCIONES[caba√±aKey].descripcion.split('\n\n');
      for (const part of descParts) {
        await flowDynamic(part);
      }

      await flowDynamic('üìÖ Por favor, indica las fechas de tu estad√≠a (ej: "15-18 agosto" o "15/08 - 18/08"):');
      return { caba√±aSeleccionada: caba√±a };
    }
  )
  .addAnswer(
    { capture: true },
    async (ctx, { flowDynamic, state, endFlow }) => {
      const { caba√±aSeleccionada } = await state.getState();
      if (!caba√±aSeleccionada) {
        await flowDynamic('‚ö†Ô∏è Error: No se encontr√≥ la caba√±a seleccionada. Por favor inicia de nuevo.');
        return endFlow();
      }

      const fechas = parsearFechas(ctx.body);
      if (!fechas) {
        await flowDynamic('‚ö†Ô∏è Formato de fecha no reconocido. Por favor usa:\n' +
                         '- "15-18 agosto"\n' +
                         '- "15/08 - 18/08"\n' +
                         '- "15 al 18 de agosto"');
        return;
      }

      // Validar fechas futuras
      if (fechas.entrada.isBefore(moment(), 'day')) {
        await flowDynamic('‚ö†Ô∏è La fecha de entrada no puede ser en el pasado.');
        return;
      }

      // Validar estad√≠a m√≠nima (2 noches)
      const noches = fechas.salida.diff(fechas.entrada, 'days');
      if (noches < 2) {
        await flowDynamic('‚ö†Ô∏è La estad√≠a m√≠nima es de 2 noches.');
        return;
      }

      const disponible = checkDisponibilidad(caba√±aSeleccionada, fechas.entrada, fechas.salida);
      if (!disponible) {
        await flowDynamic(`‚ö†Ô∏è Lo sentimos, *${caba√±aSeleccionada.nombre}* no est√° disponible del ${fechas.entrada.format('DD/MM')} al ${fechas.salida.format('DD/MM')}.`);
        return;
      }

      await state.update({ 
        reservaTemporal: {
          caba√±aId: caba√±aSeleccionada.id,
          fechas,
          estado: 'pendiente',
          noches
        }
      });

      await flowDynamic(`‚úÖ *¬°Disponible!*\n\n` +
        `*${caba√±aSeleccionada.nombre}* disponible del ${fechas.entrada.format('DD/MM')} al ${fechas.salida.format('DD/MM')} (${noches} noches).\n\n` +
        `Por favor ingresa tu nombre completo para continuar:`);
    }
  )
  .addAnswer(
    { capture: true },
    async (ctx, { flowDynamic, state, endFlow }) => {
      const { reservaTemporal } = await state.getState();
      if (!reservaTemporal) {
        await flowDynamic('‚ö†Ô∏è Error: Informaci√≥n de reserva no encontrada. Por favor inicia de nuevo.');
        return endFlow();
      }

      const nombre = ctx.body.trim();
      if (nombre.split(' ').length < 2 || nombre.length < 5) {
        await flowDynamic('‚ö†Ô∏è Por favor ingresa tu nombre completo (al menos nombre y apellido).');
        return;
      }

      const reservaData = {
        nombre,
        fecha_inicio: reservaTemporal.fechas.entrada.format('YYYY-MM-DD'),
        fecha_fin: reservaTemporal.fechas.salida.format('YYYY-MM-DD'),
        estado: 'pendiente',
        timestamp: new Date().toISOString(),
        noches: reservaTemporal.noches
      };

      const exito = await addReserva(reservaTemporal.caba√±aId, reservaData);
      if (exito) {
        await flowDynamic(
          'üéâ *¬°Reserva confirmada!*\n\n' +
          `Gracias ${nombre} por elegir Villas Julie.\n\n` +
          `*Detalles de tu reserva:*\n` +
          `- Caba√±a: ${reservaTemporal.caba√±aId}\n` +
          `- Fechas: ${reservaData.fecha_inicio} al ${reservaData.fecha_fin}\n` +
          `- Noches: ${reservaData.noches}\n\n` +
          `Te contactaremos pronto para finalizar el proceso. ¬°Bienvenido!`
        );
      } else {
        await flowDynamic('‚ö†Ô∏è Hubo un error al guardar la reserva. Por favor intenta de nuevo o contacta directamente por WhatsApp.');
      }
      return endFlow();
    }
  );

module.exports = { flowAlojamientos, addReserva };