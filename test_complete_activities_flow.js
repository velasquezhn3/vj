const { generateDynamicMenu } = require('./controllers/mainMenuHandler');
const { sendActividadDetails } = require('./controllers/actividadesController');

// Mock de funciones del bot para pruebas
const mockBot = {
    sendMessage: async (remitente, mensaje) => {
        console.log(`üì± Mensaje a ${remitente}:`);
        if (mensaje.text) {
            console.log(`üí¨ Texto: ${mensaje.text}`);
        }
        if (mensaje.image) {
            console.log(`üñºÔ∏è Imagen: ${mensaje.image.url}`);
            if (mensaje.caption) {
                console.log(`üìù Caption: ${mensaje.caption}`);
            }
        }
        console.log('---');
    }
};

const mockEstablecerEstado = async (remitente, estado) => {
    console.log(`üîÑ Estado establecido para ${remitente}: ${estado}`);
};

async function testCompleteActivitiesFlow() {
    console.log('üß™ Probando flujo completo de actividades...\n');
    
    try {
        // 1. Probar men√∫ de actividades
        console.log('1Ô∏è‚É£ Generando men√∫ de actividades:');
        const menuActividades = await generateDynamicMenu('actividades');
        console.log(menuActividades);
        console.log('\n');
        
        // 2. Probar selecci√≥n de actividad
        console.log('2Ô∏è‚É£ Probando selecci√≥n de actividad (opci√≥n 1):');
        await sendActividadDetails(mockBot, '50488888888@s.whatsapp.net', 1, mockEstablecerEstado);
        console.log('\n');
        
        // 3. Probar selecci√≥n de actividad 2
        console.log('3Ô∏è‚É£ Probando selecci√≥n de actividad (opci√≥n 2):');
        await sendActividadDetails(mockBot, '50488888888@s.whatsapp.net', 2, mockEstablecerEstado);
        
    } catch (error) {
        console.error('‚ùå Error:', error);
    }
    
    process.exit(0);
}

testCompleteActivitiesFlow();
